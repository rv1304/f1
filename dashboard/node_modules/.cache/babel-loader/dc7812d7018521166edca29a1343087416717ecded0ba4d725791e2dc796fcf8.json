{"ast":null,"code":"/**\r\n * VelocityForge Racing Dashboard\r\n * \r\n * Real-time F1-style racing dashboard with live telemetry\r\n */import React,{useState,useEffect,useCallback}from'react';import'./App.css';import RaceDashboard from'./components/RaceDashboard';import RaceControl from'./components/RaceControl';import ConnStatus from'./components/ConnStatus';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const API_BASE=process.env.REACT_APP_API_BASE||'http://localhost:3001';const WS_URL=process.env.REACT_APP_WS_URL||'ws://localhost:3001';function App(){const[isConnected,setIsConnected]=useState(false);const[raceData,setRaceData]=useState(null);const[activeRace,setActiveRace]=useState(null);const[websocket,setWebsocket]=useState(null);const[events,setEvents]=useState([]);const[connectionError,setConnectionError]=useState(null);// WebSocket connection\nconst connectWebSocket=useCallback(()=>{try{const ws=new WebSocket(WS_URL);ws.onopen=()=>{console.log('🔌 Connected to VelocityForge Racing Server');setIsConnected(true);setConnectionError(null);setWebsocket(ws);};ws.onmessage=event=>{try{const message=JSON.parse(event.data);handleWebSocketMessage(message);}catch(error){console.error('❌ Failed to parse WebSocket message:',error);}};ws.onclose=()=>{console.log('🔌 Disconnected from server');setIsConnected(false);setWebsocket(null);// Attempt to reconnect after 3 seconds\nsetTimeout(connectWebSocket,3000);};ws.onerror=error=>{console.error('❌ WebSocket error:',error);setConnectionError('Failed to connect to racing server');setIsConnected(false);};}catch(error){console.error('❌ Failed to create WebSocket connection:',error);setConnectionError('Failed to establish connection');}},[]);// Handle WebSocket messages\nconst handleWebSocketMessage=message=>{switch(message.type){case'connection_established':console.log('✅ Connection established:',message.data.message);break;case'race_started':console.log('🏁 Race started:',message.data);setActiveRace(message.data.raceId);// Subscribe to race updates\nif(websocket&&websocket.readyState===WebSocket.OPEN){websocket.send(JSON.stringify({type:'subscribe_to_race',raceId:message.data.raceId}));}break;case'race_update':setRaceData(message.data);break;case'race_event':setEvents(prev=>[message.data.event,...prev.slice(0,19)]);// Keep last 20 events\nbreak;case'race_finished':console.log('🏁 Race finished:',message.data);setActiveRace(null);break;case'race_stopped':console.log('🛑 Race stopped:',message.data);setActiveRace(null);setRaceData(null);break;default:console.log('🔍 Unknown message type:',message.type);}};// Start new race\nconst startRace=async function(mode,track){let config=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};try{const response=await fetch(\"\".concat(API_BASE,\"/api/race/start\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({mode,track,config})});const result=await response.json();if(result.success){console.log('🏁 Race started successfully:',result);return result;}else{throw new Error(result.error||'Failed to start race');}}catch(error){console.error('❌ Failed to start race:',error);throw error;}};// Stop active race\nconst stopRace=async()=>{if(!activeRace)return;try{const response=await fetch(\"\".concat(API_BASE,\"/api/race/\").concat(activeRace,\"/stop\"),{method:'POST'});const result=await response.json();if(result.success){console.log('🛑 Race stopped successfully');setActiveRace(null);setRaceData(null);setEvents([]);}else{throw new Error(result.error||'Failed to stop race');}}catch(error){console.error('❌ Failed to stop race:',error);throw error;}};// Initialize WebSocket connection\nuseEffect(()=>{connectWebSocket();return()=>{if(websocket){websocket.close();}};},[]);// eslint-disable-line react-hooks/exhaustive-deps\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"App min-h-screen bg-gray-900 text-white\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"bg-red-600 border-b-4 border-red-700 px-6 py-4\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center space-x-4\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl font-bold text-white\",children:\"\\uD83C\\uDFCE\\uFE0F VelocityForge Racing\"}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-red-100\",children:\"Real-time Multi-Agent Racing Simulator\"})]}),/*#__PURE__*/_jsx(ConnStatus,{isConnected:isConnected,error:connectionError,activeRace:activeRace})]})}),/*#__PURE__*/_jsxs(\"main\",{className:\"flex h-screen\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-80 bg-gray-800 border-r border-gray-700 p-4\",children:/*#__PURE__*/_jsx(RaceControl,{isConnected:isConnected,activeRace:activeRace,onStartRace:startRace,onStopRace:stopRace,events:events})}),/*#__PURE__*/_jsx(\"div\",{className:\"flex-1 bg-gray-900\",children:/*#__PURE__*/_jsx(RaceDashboard,{raceData:raceData,activeRace:activeRace,isConnected:isConnected})})]}),/*#__PURE__*/_jsx(\"footer\",{className:\"bg-gray-800 border-t border-gray-700 px-6 py-2 text-center text-sm text-gray-400\",children:\"VelocityForge Racing Simulator \\xA9 2025 | Real-time Multi-Agent Competition Platform\"})]});}export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","RaceDashboard","RaceControl","ConnStatus","jsx","_jsx","jsxs","_jsxs","API_BASE","process","env","REACT_APP_API_BASE","WS_URL","REACT_APP_WS_URL","App","isConnected","setIsConnected","raceData","setRaceData","activeRace","setActiveRace","websocket","setWebsocket","events","setEvents","connectionError","setConnectionError","connectWebSocket","ws","WebSocket","onopen","console","log","onmessage","event","message","JSON","parse","data","handleWebSocketMessage","error","onclose","setTimeout","onerror","type","raceId","readyState","OPEN","send","stringify","prev","slice","startRace","mode","track","config","arguments","length","undefined","response","fetch","concat","method","headers","body","result","json","success","Error","stopRace","close","className","children","onStartRace","onStopRace"],"sources":["C:/Users/jatin/OneDrive/Desktop/f1/dashboard/src/App.js"],"sourcesContent":["/**\r\n * VelocityForge Racing Dashboard\r\n * \r\n * Real-time F1-style racing dashboard with live telemetry\r\n */\r\n\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport './App.css';\r\nimport RaceDashboard from './components/RaceDashboard';\r\nimport RaceControl from './components/RaceControl';\r\nimport ConnStatus from './components/ConnStatus';\r\n\r\nconst API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:3001';\r\nconst WS_URL = process.env.REACT_APP_WS_URL || 'ws://localhost:3001';\r\n\r\nfunction App() {\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const [raceData, setRaceData] = useState(null);\r\n  const [activeRace, setActiveRace] = useState(null);\r\n  const [websocket, setWebsocket] = useState(null);\r\n  const [events, setEvents] = useState([]);\r\n  const [connectionError, setConnectionError] = useState(null);\r\n\r\n  // WebSocket connection\r\n  const connectWebSocket = useCallback(() => {\r\n    try {\r\n      const ws = new WebSocket(WS_URL);\r\n      \r\n      ws.onopen = () => {\r\n        console.log('🔌 Connected to VelocityForge Racing Server');\r\n        setIsConnected(true);\r\n        setConnectionError(null);\r\n        setWebsocket(ws);\r\n      };\r\n      \r\n      ws.onmessage = (event) => {\r\n        try {\r\n          const message = JSON.parse(event.data);\r\n          handleWebSocketMessage(message);\r\n        } catch (error) {\r\n          console.error('❌ Failed to parse WebSocket message:', error);\r\n        }\r\n      };\r\n      \r\n      ws.onclose = () => {\r\n        console.log('🔌 Disconnected from server');\r\n        setIsConnected(false);\r\n        setWebsocket(null);\r\n        \r\n        // Attempt to reconnect after 3 seconds\r\n        setTimeout(connectWebSocket, 3000);\r\n      };\r\n      \r\n      ws.onerror = (error) => {\r\n        console.error('❌ WebSocket error:', error);\r\n        setConnectionError('Failed to connect to racing server');\r\n        setIsConnected(false);\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('❌ Failed to create WebSocket connection:', error);\r\n      setConnectionError('Failed to establish connection');\r\n    }\r\n  }, []);\r\n\r\n  // Handle WebSocket messages\r\n  const handleWebSocketMessage = (message) => {\r\n    switch (message.type) {\r\n      case 'connection_established':\r\n        console.log('✅ Connection established:', message.data.message);\r\n        break;\r\n        \r\n      case 'race_started':\r\n        console.log('🏁 Race started:', message.data);\r\n        setActiveRace(message.data.raceId);\r\n        // Subscribe to race updates\r\n        if (websocket && websocket.readyState === WebSocket.OPEN) {\r\n          websocket.send(JSON.stringify({\r\n            type: 'subscribe_to_race',\r\n            raceId: message.data.raceId\r\n          }));\r\n        }\r\n        break;\r\n        \r\n      case 'race_update':\r\n        setRaceData(message.data);\r\n        break;\r\n        \r\n      case 'race_event':\r\n        setEvents(prev => [message.data.event, ...prev.slice(0, 19)]); // Keep last 20 events\r\n        break;\r\n        \r\n      case 'race_finished':\r\n        console.log('🏁 Race finished:', message.data);\r\n        setActiveRace(null);\r\n        break;\r\n        \r\n      case 'race_stopped':\r\n        console.log('🛑 Race stopped:', message.data);\r\n        setActiveRace(null);\r\n        setRaceData(null);\r\n        break;\r\n        \r\n      default:\r\n        console.log('🔍 Unknown message type:', message.type);\r\n    }\r\n  };\r\n\r\n  // Start new race\r\n  const startRace = async (mode, track, config = {}) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE}/api/race/start`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ mode, track, config }),\r\n      });\r\n      \r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        console.log('🏁 Race started successfully:', result);\r\n        return result;\r\n      } else {\r\n        throw new Error(result.error || 'Failed to start race');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to start race:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Stop active race\r\n  const stopRace = async () => {\r\n    if (!activeRace) return;\r\n    \r\n    try {\r\n      const response = await fetch(`${API_BASE}/api/race/${activeRace}/stop`, {\r\n        method: 'POST',\r\n      });\r\n      \r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        console.log('🛑 Race stopped successfully');\r\n        setActiveRace(null);\r\n        setRaceData(null);\r\n        setEvents([]);\r\n      } else {\r\n        throw new Error(result.error || 'Failed to stop race');\r\n      }\r\n    } catch (error) {\r\n      console.error('❌ Failed to stop race:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Initialize WebSocket connection\r\n  useEffect(() => {\r\n    connectWebSocket();\r\n    \r\n    return () => {\r\n      if (websocket) {\r\n        websocket.close();\r\n      }\r\n    };\r\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n  return (\r\n    <div className=\"App min-h-screen bg-gray-900 text-white\">\r\n      {/* Header */}\r\n      <header className=\"bg-red-600 border-b-4 border-red-700 px-6 py-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center space-x-4\">\r\n            <h1 className=\"text-3xl font-bold text-white\">\r\n              🏎️ VelocityForge Racing\r\n            </h1>\r\n            <div className=\"text-sm text-red-100\">\r\n              Real-time Multi-Agent Racing Simulator\r\n            </div>\r\n          </div>\r\n          \r\n          <ConnStatus \r\n            isConnected={isConnected}\r\n            error={connectionError}\r\n            activeRace={activeRace}\r\n          />\r\n        </div>\r\n      </header>\r\n\r\n      {/* Main Content */}\r\n      <main className=\"flex h-screen\">\r\n        {/* Left Panel - Race Control */}\r\n        <div className=\"w-80 bg-gray-800 border-r border-gray-700 p-4\">\r\n          <RaceControl\r\n            isConnected={isConnected}\r\n            activeRace={activeRace}\r\n            onStartRace={startRace}\r\n            onStopRace={stopRace}\r\n            events={events}\r\n          />\r\n        </div>\r\n\r\n        {/* Right Panel - Race Dashboard */}\r\n        <div className=\"flex-1 bg-gray-900\">\r\n          <RaceDashboard\r\n            raceData={raceData}\r\n            activeRace={activeRace}\r\n            isConnected={isConnected}\r\n          />\r\n        </div>\r\n      </main>\r\n\r\n      {/* Footer */}\r\n      <footer className=\"bg-gray-800 border-t border-gray-700 px-6 py-2 text-center text-sm text-gray-400\">\r\n        VelocityForge Racing Simulator © 2025 | Real-time Multi-Agent Competition Platform\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}